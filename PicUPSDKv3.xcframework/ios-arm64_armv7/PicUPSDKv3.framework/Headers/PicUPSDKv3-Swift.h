#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef PICUPSDKV3_SWIFT_H
#define PICUPSDKV3_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PicUPSDKv3",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif







typedef SWIFT_ENUM_NAMED(NSInteger, PicUpErrorNo, "ErrorNo", open) {
  PicUpErrorNoENOTSUP = 0,
  PicUpErrorNoEFAILED = 1,
  PicUpErrorNoEABORTED = 2,
  PicUpErrorNoENOTFOUND = 3,
  PicUpErrorNoEBUSY = 4,
  PicUpErrorNoEAVAIL = 5,
  PicUpErrorNoEFORMAT = 6,
  PicUpErrorNoEWRITE = 7,
  PicUpErrorNoEREAD = 8,
  PicUpErrorNoESTATE = 9,
  PicUpErrorNoESUCCESS = 10,
  PicUpErrorNoALREADY_REGISTERED = 11,
  PicUpErrorNoNOT_SUPPORTED = 12,
  PicUpErrorNoCUSTOM_MSG = 13,
  PicUpErrorNoNO_INTERNET_CONNECTION = 14,
  PicUpErrorNoNO_CONTACTS_ACCESS = 15,
};








@class NSNumber;
@class UIView;
@protocol PicUpOptInView;
@class UIViewController;
enum PicUpOptInResponse : NSInteger;

SWIFT_CLASS("_TtC10PicUPSDKv315PicUpOptInAlert")
@interface PicUpOptInAlert : NSObject
/// Show opt-in when user previously disallowed Contacts access (default: true)
@property (nonatomic) BOOL showsWhenDisallowed;
/// Show custom view in opt-in screen
@property (nonatomic, strong) UIView <PicUpOptInView> * _Nullable customView;
/// Show opt-in screen before asking user to grant contacts permission
- (void)showFrom:(UIViewController * _Nullable)from completion:(void (^ _Nullable)(enum PicUpOptInResponse))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Response to contacts permission opt-in alert
typedef SWIFT_ENUM(NSInteger, PicUpOptInResponse, open) {
/// Contacts permissions already determined - no opt-in alert shown
  PicUpOptInResponsePreDetermined = 0,
/// User agreed to be shown the system contacts permissions dialog
  PicUpOptInResponseYes = 1,
/// User declined the opt-in and was not shown the system contacts permissions dialog
  PicUpOptInResponseNo = 2,
/// The time to show the opt-in alert is not now - no opt-in alert shown
  PicUpOptInResponseNotNow = 3,
};

@class UIButton;

/// UIView with an <code>acceptButton</code> and a <code>declineButton</code>
SWIFT_PROTOCOL("_TtP10PicUPSDKv314PicUpOptInView_")
@protocol PicUpOptInView
@property (nonatomic, readonly, strong) UIButton * _Nonnull acceptButton;
@property (nonatomic, readonly, strong) UIButton * _Nonnull declineButton;
@end

@class NSString;

SWIFT_CLASS("_TtC10PicUPSDKv311PicUpResult")
@interface PicUpResult : NSObject
@property (nonatomic, readonly) enum PicUpErrorNo errorNo;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable data;
@property (nonatomic, readonly, copy) NSString * _Nullable msg;
@property (nonatomic, readonly) BOOL isSuccess;
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PicUpPermissionMode : NSInteger;
@class NSData;

SWIFT_CLASS("_TtC10PicUPSDKv38PicUpSDK")
@interface PicUpSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PicUpSDK * _Nonnull shared;)
+ (PicUpSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) PicUpOptInAlert * _Nonnull optIn;
/// Should the  SDK ask the user for Contacts permissions (<code>internal</code> mode) or let the app handle that (<code>external</code> mode, the default).
@property (nonatomic) enum PicUpPermissionMode permissionMode;
/// Automatically show opt-in screen before asking for Contacts permission. (<code>false</code> by default)
@property (nonatomic) BOOL showsOptIn;
@property (nonatomic) BOOL isDebugMode;
- (BOOL)isServiceEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)enableService;
- (void)disableService;
- (void)clearData;
/// Register to the PicUP service
/// \param clientName Name of the client organization
///
/// \param clientPhoneNumber Hashed representation of the user phone number
///
/// \param organizationCode from the PicUP team
///
/// \param securityCode from the PicUP team
///
/// \param pushToken From <code>application:didRegisterForRemoteNotificationsWithDeviceToken</code> or Firebase <code>Messaging.apnsToken</code>
///
/// \param completion Called when the registration is complete with a <code>result</code>. Check <code>result.isSuccess</code> for successful registration and <code>result.localizedDescription</code> for error description.
///
- (void)registerWithClientName:(NSString * _Nonnull)clientName clientPhoneNumber:(NSString * _Nonnull)clientPhoneNumber organizationCode:(NSString * _Nonnull)organizationCode securityCode:(NSString * _Nonnull)securityCode pushToken:(NSData * _Nullable)pushToken completion:(void (^ _Nullable)(PicUpResult * _Nonnull))completion;
- (void)register:(NSString * _Nonnull)clientName clientPhoneNumber:(NSString * _Nonnull)clientPhoneNumber organizationCode:(NSString * _Nonnull)organizationCode securityCode:(NSString * _Nonnull)securityCode uuid:(NSString * _Nonnull)uuid completion:(void (^ _Nonnull)(PicUpResult * _Nonnull))completion SWIFT_DEPRECATED_MSG("uuid hex String argument changed to raw Data deviceToken", "registerWithClientName:clientPhoneNumber:organizationCode:securityCode:pushToken:completion:");
/// Call from background fetch (either <code>application(_:performFetchWithCompletionHandler:)</code> or your <code>BGTaskScheduler</code> registered <code>launchHandler</code>)
- (void)refreshWithCompletion:(void (^ _Nullable)(PicUpResult * _Nonnull))completion;
/// Allow only images signed with your key.
/// \param pemPublicKey An RSA public key, represented as PEM of Base64 string.
///
- (void)setImagesAuthenticationKeyWithPemPublicKey:(NSString * _Nonnull)pemPublicKey;
/// Call this function in your AppDelegate’s <code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code>
/// \param userInfo The notification’s <code>userInfo</code>
///
/// \param completion Called after the notification data is processed. Use it to call <code>completionHandler(.newData)</code>.
///
- (void)didReceiveMessageWithUserInfo:(NSDictionary * _Nonnull)userInfo completion:(void (^ _Nullable)(PicUpResult * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PicUpPermissionMode, "PermissionMode", open) {
  PicUpPermissionModeExternal = 0,
  PicUpPermissionModeInternal = 1,
};
















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef PICUPSDKV3_SWIFT_H
#define PICUPSDKV3_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PicUPSDKv3",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif







typedef SWIFT_ENUM_NAMED(NSInteger, PicUpErrorNo, "ErrorNo", open) {
  PicUpErrorNoENOTSUP = 0,
  PicUpErrorNoEFAILED = 1,
  PicUpErrorNoEABORTED = 2,
  PicUpErrorNoENOTFOUND = 3,
  PicUpErrorNoEBUSY = 4,
  PicUpErrorNoEAVAIL = 5,
  PicUpErrorNoEFORMAT = 6,
  PicUpErrorNoEWRITE = 7,
  PicUpErrorNoEREAD = 8,
  PicUpErrorNoESTATE = 9,
  PicUpErrorNoESUCCESS = 10,
  PicUpErrorNoALREADY_REGISTERED = 11,
  PicUpErrorNoNOT_SUPPORTED = 12,
  PicUpErrorNoCUSTOM_MSG = 13,
  PicUpErrorNoNO_INTERNET_CONNECTION = 14,
  PicUpErrorNoNO_CONTACTS_ACCESS = 15,
};








@class NSNumber;
@class UIView;
@protocol PicUpOptInView;
@class UIViewController;
enum PicUpOptInResponse : NSInteger;

SWIFT_CLASS("_TtC10PicUPSDKv315PicUpOptInAlert")
@interface PicUpOptInAlert : NSObject
/// Show opt-in when user previously disallowed Contacts access (default: true)
@property (nonatomic) BOOL showsWhenDisallowed;
/// Show custom view in opt-in screen
@property (nonatomic, strong) UIView <PicUpOptInView> * _Nullable customView;
/// Show opt-in screen before asking user to grant contacts permission
- (void)showFrom:(UIViewController * _Nullable)from completion:(void (^ _Nullable)(enum PicUpOptInResponse))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Response to contacts permission opt-in alert
typedef SWIFT_ENUM(NSInteger, PicUpOptInResponse, open) {
/// Contacts permissions already determined - no opt-in alert shown
  PicUpOptInResponsePreDetermined = 0,
/// User agreed to be shown the system contacts permissions dialog
  PicUpOptInResponseYes = 1,
/// User declined the opt-in and was not shown the system contacts permissions dialog
  PicUpOptInResponseNo = 2,
/// The time to show the opt-in alert is not now - no opt-in alert shown
  PicUpOptInResponseNotNow = 3,
};

@class UIButton;

/// UIView with an <code>acceptButton</code> and a <code>declineButton</code>
SWIFT_PROTOCOL("_TtP10PicUPSDKv314PicUpOptInView_")
@protocol PicUpOptInView
@property (nonatomic, readonly, strong) UIButton * _Nonnull acceptButton;
@property (nonatomic, readonly, strong) UIButton * _Nonnull declineButton;
@end

@class NSString;

SWIFT_CLASS("_TtC10PicUPSDKv311PicUpResult")
@interface PicUpResult : NSObject
@property (nonatomic, readonly) enum PicUpErrorNo errorNo;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable data;
@property (nonatomic, readonly, copy) NSString * _Nullable msg;
@property (nonatomic, readonly) BOOL isSuccess;
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PicUpPermissionMode : NSInteger;
@class NSData;

SWIFT_CLASS("_TtC10PicUPSDKv38PicUpSDK")
@interface PicUpSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PicUpSDK * _Nonnull shared;)
+ (PicUpSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) PicUpOptInAlert * _Nonnull optIn;
/// Should the  SDK ask the user for Contacts permissions (<code>internal</code> mode) or let the app handle that (<code>external</code> mode, the default).
@property (nonatomic) enum PicUpPermissionMode permissionMode;
/// Automatically show opt-in screen before asking for Contacts permission. (<code>false</code> by default)
@property (nonatomic) BOOL showsOptIn;
@property (nonatomic) BOOL isDebugMode;
- (BOOL)isServiceEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)enableService;
- (void)disableService;
- (void)clearData;
/// Register to the PicUP service
/// \param clientName Name of the client organization
///
/// \param clientPhoneNumber Hashed representation of the user phone number
///
/// \param organizationCode from the PicUP team
///
/// \param securityCode from the PicUP team
///
/// \param pushToken From <code>application:didRegisterForRemoteNotificationsWithDeviceToken</code> or Firebase <code>Messaging.apnsToken</code>
///
/// \param completion Called when the registration is complete with a <code>result</code>. Check <code>result.isSuccess</code> for successful registration and <code>result.localizedDescription</code> for error description.
///
- (void)registerWithClientName:(NSString * _Nonnull)clientName clientPhoneNumber:(NSString * _Nonnull)clientPhoneNumber organizationCode:(NSString * _Nonnull)organizationCode securityCode:(NSString * _Nonnull)securityCode pushToken:(NSData * _Nullable)pushToken completion:(void (^ _Nullable)(PicUpResult * _Nonnull))completion;
- (void)register:(NSString * _Nonnull)clientName clientPhoneNumber:(NSString * _Nonnull)clientPhoneNumber organizationCode:(NSString * _Nonnull)organizationCode securityCode:(NSString * _Nonnull)securityCode uuid:(NSString * _Nonnull)uuid completion:(void (^ _Nonnull)(PicUpResult * _Nonnull))completion SWIFT_DEPRECATED_MSG("uuid hex String argument changed to raw Data deviceToken", "registerWithClientName:clientPhoneNumber:organizationCode:securityCode:pushToken:completion:");
/// Call from background fetch (either <code>application(_:performFetchWithCompletionHandler:)</code> or your <code>BGTaskScheduler</code> registered <code>launchHandler</code>)
- (void)refreshWithCompletion:(void (^ _Nullable)(PicUpResult * _Nonnull))completion;
/// Allow only images signed with your key.
/// \param pemPublicKey An RSA public key, represented as PEM of Base64 string.
///
- (void)setImagesAuthenticationKeyWithPemPublicKey:(NSString * _Nonnull)pemPublicKey;
/// Call this function in your AppDelegate’s <code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code>
/// \param userInfo The notification’s <code>userInfo</code>
///
/// \param completion Called after the notification data is processed. Use it to call <code>completionHandler(.newData)</code>.
///
- (void)didReceiveMessageWithUserInfo:(NSDictionary * _Nonnull)userInfo completion:(void (^ _Nullable)(PicUpResult * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PicUpPermissionMode, "PermissionMode", open) {
  PicUpPermissionModeExternal = 0,
  PicUpPermissionModeInternal = 1,
};
















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
