// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PicUPSDKv3
import Contacts
import Foundation
@_exported import PicUPSDKv3
import Swift
import UIKit
@objc @_inheritsConvenienceInitializers public class PicUpResult : ObjectiveC.NSObject {
  public var errorNo: PicUPSDKv3.ErrorNo? {
    get
  }
  public var data: [Swift.String : Any]? {
    get
  }
  public var msg: Swift.String? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum ErrorNo : Swift.String, Swift.CaseIterable {
  case ENOTSUP
  case EFAILED
  case EABORTED
  case ENOTFOUND
  case EBUSY
  case EAVAIL
  case EFORMAT
  case EWRITE
  case EREAD
  case ESTATE
  case ESUCCESS
  case ALREADY_REGISTERED
  case NOT_SUPPORTED
  case CUSTOM_MSG
  case NO_INTERNET_CONNECTION
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PicUPSDKv3.ErrorNo]
  public typealias RawValue = Swift.String
  public static var allCases: [PicUPSDKv3.ErrorNo] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class PicUpSDK {
  public static let shared: PicUPSDKv3.PicUpSDK
  public enum PermissionMode {
    case external
    case `internal`
    public static func == (a: PicUPSDKv3.PicUpSDK.PermissionMode, b: PicUPSDKv3.PicUpSDK.PermissionMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var permissionMode: PicUPSDKv3.PicUpSDK.PermissionMode {
    get
    set
  }
  public var isDebugMode: Swift.Bool {
    get
    set
  }
  public func isServiceEnabled() -> Swift.Bool
  public func enableService()
  public func disableService()
  public func clearData()
  public func register(_ clientName: Swift.String, clientPhoneNumber: Swift.String, organizationCode: Swift.String, securityCode: Swift.String, uuid: Swift.String, completion: @escaping (PicUPSDKv3.PicUpResult) -> Swift.Void)
  public func didReceiveMessage(userInfo: [Swift.AnyHashable : Any], completion: ((PicUPSDKv3.PicUpResult) -> Swift.Void)? = nil)
  @objc deinit
}
extension PicUPSDKv3.ErrorNo : Swift.Equatable {}
extension PicUPSDKv3.ErrorNo : Swift.Hashable {}
extension PicUPSDKv3.ErrorNo : Swift.RawRepresentable {}
extension PicUPSDKv3.PicUpSDK.PermissionMode : Swift.Equatable {}
extension PicUPSDKv3.PicUpSDK.PermissionMode : Swift.Hashable {}
